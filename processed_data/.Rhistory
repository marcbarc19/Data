indiv_adam_adapt_Mn_tran.effects <- ggemmeans(Adapt.lmer, c("Adapt_Mn_ON [all]", "Section"))
indiv_adam_adapt_Mn_tran.plot <- plot(indiv_adam_adapt_Mn_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Motor Noise Estimate (BC)", y = "Predicted Async. (orderNorm)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkgrey","darkgrey")) +
scale_fill_manual(values= c("darkgrey","darkgrey")) +
theme_bw()
#indiv_adam_adapt_Mn_tran.plot
# Combined plot
# Adaptation only plot
Secondo_Adapt_Effect_plot <- ggarrange(indiv_adam_adapt_alpha_tran.plot, indiv_adam_adapt_beta_tran.plot,
indiv_adam_adapt_Tn_tran.plot, indiv_adam_adapt_Mn_tran.plot,
#labels = c("A", "B", "C", "D"),
label.x = c(-.001, -.001, -.001, -.001),
label.y = c(1.09, 1.09, 1.09, 1.09),
font.label=list(color="black",size=24),
ncol = 1, nrow = 4
)
Secondo_Adapt_Effect_plot
Secondo_Adapt_Effect_plot <- Secondo_Adapt_Effect_plot %>% annotate_figure(top = text_grob("Secondo", color = "Black", face = "bold", size = 24))
Secondo_Adapt_Effect_plot
# Full ADAM
indiv_adam_full_beta_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Beta [all]", "Section"))
indiv_adam_full_beta_tran.plot <- plot(indiv_adam_full_beta_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Period Correction Estimate (BC)", y = "Predicted Async. (orderNorm)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkorange","darkorange")) +
scale_fill_manual(values= c("darkorange","darkorange")) +
theme_bw()
#indiv_adam_full_beta_tran.plot
indiv_adam_full_delta_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Delta [all]", "Section"))
indiv_adam_full_delta_tran.plot <- plot(indiv_adam_full_delta_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Temporal Prediction Estimate (Arcsinh)", y = "Predicted Async. (yohn)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("blue","blue")) +
scale_fill_manual(values= c("blue","blue")) +
theme_bw()
#indiv_adam_full_delta_tran.plot
indiv_adam_full_gamma_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Gamma_ON [all]", "Section"))
indiv_adam_full_gamma_tran.plot <- plot(indiv_adam_full_gamma_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Anticipatory Correction Estimate", y = "Predicted Async. (orderNorm)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkgreen","darkgreen")) +
scale_fill_manual(values= c("darkgreen","darkgreen")) +
theme_bw()
#indiv_adam_full_gamma_tran.plot
indiv_adam_full_Tn_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Tn_BC [all]", "Section"))
indiv_adam_full_Tn_tran.plot <- plot(indiv_adam_full_Tn_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Timekeeper Noise Estimate (YJ)", y = "Residual Async. (yohn)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("black","black")) +
scale_fill_manual(values= c("black","black")) +
theme_bw()
#indiv_adam_full_Tn_tran.plot
# Combined plot
# Full ADAM plot
Secondo_Joint_Effect_plot <- ggarrange(indiv_adam_full_beta_tran.plot, indiv_adam_full_delta_tran.plot,
indiv_adam_full_gamma_tran.plot, indiv_adam_full_Tn_tran.plot,
#labels = c("E", "F", "G", "H"),
label.x = c(-.001, -.001, -.001, -.001),
label.y = c(1.09, 1.09, 1.09, 1.09),
font.label=list(color="black",size=24),
ncol = 1, nrow = 4)
Secondo_Joint_Effect_plot
Secondo_Joint_Effect_plot <- Secondo_Joint_Effect_plot %>% annotate_figure(top = text_grob("Secondo", color = "Black", face = "bold", size = 24))
Secondo_Joint_Effect_plot
FULL_Adapt_Effect_plot <- ggarrange(Primo_Adapt_Effect_plot, Secondo_Adapt_Effect_plot, Adapt_Effect_plot,
ncol = 3, nrow = 1)
FULL_Adapt_Effect_plot <- FULL_Adapt_Effect_plot %>% annotate_figure(top = text_grob("Adaptation Only Model", color = "Black", face = "bold", size = 36))
FULL_Adapt_Effect_plot
FULL_Joint_Effect_plot <- ggarrange(Primo_Joint_Effect_plot, Secondo_Joint_Effect_plot, Joint_Effect_plot,
ncol = 3, nrow = 1)
FULL_Joint_Effect_plot <- FULL_Joint_Effect_plot %>% annotate_figure(top = text_grob("Joint Model", color = "Black", face = "bold", size = 36))
FULL_Joint_Effect_plot
all_data$Flipped <- substr(all_data$Lead_Phrase, 1, 1)
# Convert "Flipped" to a factor
all_data$Flipped <- as.factor(all_data$Flipped)
all_data_filtered <- all_data %>%
filter(Flipped == "1")  # Ensure "1" matches the level correctly
# Step 1: Calculate DV_Async_ON_diff with robust checks
all_data_diff <- all_data_filtered %>%
group_by(Section, Visual_Contact, Pair) %>%
group_modify(~ {
.x %>%
mutate(
DV_Async_ON_Difference = if (all(c(1, 2) %in% Leadership) &&
!any(is.na(DV_Async_ON[Leadership %in% c(1, 2)]))) {
DV_Async_ON[Leadership == 2] - DV_Async_ON[Leadership == 1]
} else {
NA_real_  # Assign NA if any required value is missing
}
)
}) %>%
ungroup()
# Step 2: Summarize other variables with group-wise means
all_data_diff <- all_data_diff %>%
group_by(Section, Visual_Contact, Pair) %>%
summarize(
across(
c(
Mn_Signed_Async, Mn_Abs_Async, Mn_ITI,
SD_Signed_Async, SD_Abs_Async, SD_ITI,
CV_Signed_Async, CV_Abs_Async, CV_ITI,
Adapt_Alpha, Adapt_Beta, Adapt_Delta, Adapt_Gamma,
Adapt_Tn, Adapt_Mn, Adapt_LLE, Joint_Alpha,
Joint_Beta, Joint_Delta, Joint_Gamma,
Joint_Tn, Joint_Mn, Joint_LLE, N_Events,
CritValue_Async, DV_Async,
Outlier_Async, Outlier_Alpha, Outlier_Delta,
DV_Async_ON_Difference, Adapt_Alpha_YJ, Adapt_Beta,
Adapt_Tn_ON, Adapt_Mn_ON, Joint_Beta_ON,
Joint_Delta, Joint_Gamma_ON, Joint_Tn_BC
),
mean,
na.rm = TRUE
)
)
# ADAPTATION-ONLY ADAM
# Adapt Main LMER model predicting Asynchrony
Adapt.lmer <- lmer(DV_Async_ON_Difference ~ Section * (Adapt_Alpha + Adapt_Beta + Adapt_Tn_ON + Adapt_Mn_ON) + (1 | Pair), data = all_data_diff, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Adapt.lmer_output <- summary(Adapt.lmer)
Adapt.lmer_output
capture.output(Adapt.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Adapt_Param_LMER_output.txt") # Write output to text file
# Random Effects LMER model
Adapt_random.lmer <- lmer(DV_Async_ON_Difference ~ 1 + (1 | Pair), data = all_data_diff, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Adapt_random.lmer_output <- summary(Adapt_random.lmer)
Adapt_random.lmer_output
capture.output(Adapt_random.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Adapt_Param_random_LMER_output.txt") # Write output to text file
# Compare full and reduced models
Adapt_models_comparison <- anova(Adapt.lmer, Adapt_random.lmer)
Adapt_models_comparison
capture.output(Adapt_models_comparison, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Adapt_Param_comparison.txt") # Write output to text file
Adapt.table <- huxreg(Adapt.lmer, Adapt_random.lmer, statistics = NULL, number_format = 3)
Adapt.table
huxtable::quick_docx(Adapt.table, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Adapt_Param_table.docx") # Make Word table (not standardized coefficients)
# JOINT ADAM
# Joint Main LMER model predicting Asynchrony (NB: Runs into convergence and singularity issues if Condition*Tn interaction is included)
Joint.lmer <- lmer(DV_Async_ON_Difference ~ Section * (Joint_Beta + Joint_Delta + Joint_Gamma_ON + Joint_Tn_BC) + (1 | Pair), data = all_data_diff, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Joint.lmer_output <- summary(Joint.lmer)
Joint.lmer_output
capture.output(Joint.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Joint_Param_LMER_output.txt") # Write output to text file
# Random Effects LMER model
Joint_random.lmer <- lmer(DV_Async_ON_Difference ~ 1 + (1 | Pair), data = all_data_diff, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Joint_random.lmer_output <- summary(Joint_random.lmer)
Joint_random.lmer_output
capture.output(Joint_random.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Joint_Param_random_LMER_output") # Write output to text file
# Compare full and reduced models
Joint_models_comparison <- anova(Joint.lmer, Joint_random.lmer)
Joint_models_comparison
capture.output(Joint_models_comparison, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Joint_Param_comparison.txt") # Write output to text file
Joint.table <- huxreg(Joint.lmer, Joint_random.lmer, statistics = NULL, number_format = 3)
Joint.table
huxtable::quick_docx(Joint.table, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Diff_Joint_Param_table.docx") # Make Word table (not standardized coefficients)
indiv_adam_adapt_alpha_tran.effects <- ggemmeans(Adapt.lmer, c("Adapt_Alpha [all]", "Section"))
indiv_adam_adapt_alpha_tran.plot <- plot(indiv_adam_adapt_alpha_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Phase Correction Estimate", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_color_manual(values = c("red", "red")) +
scale_fill_manual(values = c("red", "red")) +
theme_bw()
#indiv_adam_adapt_alpha_tran.plot
indiv_adam_adapt_beta_tran.effects <- ggemmeans(Adapt.lmer, c("Adapt_Beta [all]", "Section"))
indiv_adam_adapt_beta_tran.plot <- plot(indiv_adam_adapt_beta_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Period Correction Estimate (SS)", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkorange","darkorange")) +
scale_fill_manual(values= c("darkorange","darkorange")) +
theme_bw()
#indiv_adam_adapt_beta_tran.plot
indiv_adam_adapt_Tn_tran.effects <- ggemmeans(Adapt.lmer, c("Adapt_Tn_ON [all]", "Section"))
indiv_adam_adapt_Tn_tran.plot <- plot(indiv_adam_adapt_Tn_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Timekeeper Noise Estimate (ON)", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("black","black")) +
scale_fill_manual(values= c("black","black")) +
theme_bw()
#indiv_adam_adapt_Tn_tran.plot
indiv_adam_adapt_Mn_tran.effects <- ggemmeans(Adapt.lmer, c("Adapt_Mn_ON [all]", "Section"))
indiv_adam_adapt_Mn_tran.plot <- plot(indiv_adam_adapt_Mn_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Motor Noise Estimate (ON)", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkgrey","darkgrey")) +
scale_fill_manual(values= c("darkgrey","darkgrey")) +
theme_bw()
#indiv_adam_adapt_Mn_tran.plot
# Combined plot
# Adaptation only plot
Diff_Adapt_Effect_plot <- ggarrange(indiv_adam_adapt_alpha_tran.plot, indiv_adam_adapt_beta_tran.plot,
indiv_adam_adapt_Tn_tran.plot, indiv_adam_adapt_Mn_tran.plot,
labels = c("A", "B", "C", "D"),
label.x = c(-.001, -.001, -.001, -.001),
label.y = c(1.09, 1.09, 1.09, 1.09),
font.label=list(color="black",size=24),
ncol = 1, nrow = 4
)
Diff_Adapt_Effect_plot
Diff_Adapt_Effect_plot <- Diff_Adapt_Effect_plot %>% annotate_figure(top = text_grob("Adaptation Only Model", color = "Black", face = "bold", size = 24))
Diff_Adapt_Effect_plot
# Full ADAM
indiv_adam_full_beta_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Beta [all]", "Section"))
indiv_adam_full_beta_tran.plot <- plot(indiv_adam_full_beta_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Period Correction Estimate", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkorange","darkorange")) +
scale_fill_manual(values= c("darkorange","darkorange")) +
theme_bw()
indiv_adam_full_beta_tran.plot
indiv_adam_full_delta_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Delta [all]", "Section"))
indiv_adam_full_delta_tran.plot <- plot(indiv_adam_full_delta_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Temporal Prediction Estimate (CS)", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("blue","blue")) +
scale_fill_manual(values= c("blue","blue")) +
theme_bw()
indiv_adam_full_delta_tran.plot
indiv_adam_full_gamma_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Gamma_ON [all]", "Section"))
indiv_adam_full_gamma_tran.plot <- plot(indiv_adam_full_gamma_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Anticipatory Correction Estimate (ON)", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("darkgreen","darkgreen")) +
scale_fill_manual(values= c("darkgreen","darkgreen")) +
theme_bw()
indiv_adam_full_gamma_tran.plot
indiv_adam_full_Tn_tran.effects <- ggemmeans(Joint.lmer, c("Joint_Tn_BC [all]", "Section"))
indiv_adam_full_Tn_tran.plot <- plot(indiv_adam_full_Tn_tran.effects, facet = TRUE, show_residuals = TRUE, alpha = .2, dot_alpha = .5, dot_size = 2, limit_range = FALSE, jitter = NULL) +
labs(x= "Timekeeper Noise Estimate (BC)", y = "Predicted Async. (ON)", title = "") +
#coord_cartesian(ylim = c(0, 150)) +
facet_grid(.~group, labeller = label_wrap_gen(width=100)) +
facet_wrap(~factor(group, c("First Eight", "Second Eight"))) +
scale_colour_manual(values = c("black","black")) +
scale_fill_manual(values= c("black","black")) +
theme_bw()
indiv_adam_full_Tn_tran.plot
# Combined plot
# Full ADAM plot
Diff_Joint_Effect_plot <- ggarrange(indiv_adam_full_beta_tran.plot, indiv_adam_full_delta_tran.plot,
indiv_adam_full_gamma_tran.plot, indiv_adam_full_Tn_tran.plot,
labels = c("E", "F", "G", "H"),
label.x = c(-.001, -.001, -.001, -.001),
label.y = c(1.09, 1.09, 1.09, 1.09),
font.label=list(color="black",size=24),
ncol = 1, nrow = 4)
Diff_Joint_Effect_plot
Diff_Joint_Effect_plot <- Diff_Joint_Effect_plot %>% annotate_figure(top = text_grob("Joint Model", color = "Black", face = "bold", size = 24))
Diff_Joint_Effect_plot
# Combined both plots
Diff_Full_Effect_plot <- ggarrange(Diff_Adapt_Effect_plot, Diff_Joint_Effect_plot,
ncol = 2, nrow = 1)
Diff_Full_Effect_plot
Diff_Full_Effect_plot <- Diff_Full_Effect_plot %>% annotate_figure(top = text_grob("Parameter Estimates - Asynchrony Differences
", color = "Black", face = "bold", size = 36))
Diff_Full_Effect_plot
#ADAPT MODEL
set.seed(2001)
#Adapt Alpha (stayed the same, transformation worse despite not being normal)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Alpha)
ntesta3
Adapt_Alpha_YJ <- bestNormalize(norm_all_data$Adapt_Alpha)
norm_all_data$Adapt_Alpha_YJ <- predict(Adapt_Alpha_YJ, norm_all_data$Adapt_Alpha)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Alpha_YJ)
ntestLLE
#Adapt Beta (stayed the same, transformation worse despite not being normal)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Beta)
ntesta3
bestNormalize(norm_all_data$Adapt_Beta)
Adapt_Beta_SS <- bestNormalize(norm_all_data$Adapt_Beta)
norm_all_data$Adapt_Beta_SS <- predict(Adapt_Beta_SS, norm_all_data$Adapt_Beta)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Beta_SS)
ntestLLE
#Adapt TN (TRANSFORMED)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Tn)
ntesta3
bestNormalize(norm_all_data$Adapt_Tn)
Adapt_Tn_ON <- bestNormalize(norm_all_data$Adapt_Tn)
norm_all_data$Adapt_Tn_ON <- predict(Adapt_Tn_ON, norm_all_data$Adapt_Tn)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Tn_ON)
ntestLLE
#Adapt Mn (TRANSFORMED - though still really bad)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Mn)
ntesta3
bestNormalize(norm_all_data$Adapt_Mn)
Adapt_Mn_ON <- bestNormalize(norm_all_data$Adapt_Mn)
norm_all_data$Adapt_Mn_ON <- predict(Adapt_Mn_ON, norm_all_data$Adapt_Mn)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Adapt_Mn_ON)
ntestLLE
#JOINT MODEL
set.seed(2001)
#Joint Beta (TRANSFORMED, still bad arguably similar)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Beta)
ntesta3
bestNormalize(norm_all_data$Joint_Beta)
Joint_Beta_ON <- bestNormalize(norm_all_data$Joint_Beta)
norm_all_data$Joint_Beta_ON <- predict(Joint_Beta_ON, norm_all_data$Joint_Beta)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Beta_ON)
ntestLLE
#Joint Delta (Keep Untransformed)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Delta)
ntesta3
bestNormalize(norm_all_data$Joint_Delta)
Joint_Delta_YJ <- bestNormalize(norm_all_data$Joint_Delta)
norm_all_data$Joint_Delta_YJ <- predict(Joint_Delta_YJ, norm_all_data$Joint_Delta)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Delta_YJ)
ntestLLE
#Joint Gamma (TRANSFORMED, still not amazing)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Gamma)
ntesta3
bestNormalize(norm_all_data$Joint_Gamma)
Joint_Gamma_ON <- bestNormalize(norm_all_data$Joint_Gamma)
norm_all_data$Joint_Gamma_ON <- predict(Joint_Gamma_ON, norm_all_data$Joint_Gamma)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Gamma_ON)
ntestLLE
set.seed(2001)
#Joint TN (TRANSFORMED, still not amazing)
ntesta3 <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Tn)
ntesta3
bestNormalize(norm_all_data$Joint_Tn)
Joint_Tn_BC <- bestNormalize(norm_all_data$Joint_Tn)
norm_all_data$Joint_Tn_BC <- predict(Joint_Tn_BC, norm_all_data$Joint_Tn)
ntestLLE <- norm_all_data %>% group_by(Section) %>% shapiro_test(Joint_Tn_BC)
ntestLLE
# ADAPTATION-ONLY ADAM
norm_all_data_cleaned <- norm_all_data[!rownames(norm_all_data) %in% c("29", "30"), ]
# Adapt Main LMER model predicting Asynchrony
Norm_Adapt.lmer <- lmer(Norm_DV_Async_ON ~ Section * Leadership * Visual_Contact * (Adapt_Alpha + Adapt_Beta + Adapt_Tn_ON + Adapt_Mn_ON) + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Adapt.lmer_output <- summary(Norm_Adapt.lmer)
Norm_Adapt.lmer_output
capture.output(Norm_Adapt.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_LMER_output.txt") # Write output to text file
# Random Effects LMER model
Norm_Adapt_random.lmer <- lmer(Norm_DV_Async_ON ~ 1 + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Adapt_random.lmer_output <- summary(Norm_Adapt_random.lmer)
Norm_Adapt_random.lmer_output
capture.output(Norm_Adapt_random.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_random_LMER_output.txt") # Write output to text file
# Compare full and reduced models
Norm_Adapt_models_comparison <- anova(Norm_Adapt.lmer, Norm_Adapt_random.lmer)
Norm_Adapt_models_comparison
capture.output(Norm_Adapt_models_comparison, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_comparison.txt") # Write output to text file
Norm_Adapt.table <- huxreg(Norm_Adapt.lmer, Norm_Adapt_random.lmer, statistics = NULL, number_format = 3)
Norm_Adapt.table
huxtable::quick_docx(Norm_Adapt.table, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_table.docx") # Make Word table (not standardized coefficients)
# JOINT ADAM
# Joint Main LMER model predicting Asynchrony (NB: Runs into convergence and singularity issues if Condition*Tn interaction is included)
Norm_Joint.lmer <- lmer(Norm_DV_Async_ON ~ Section * Leadership * Visual_Contact * (Joint_Beta + Joint_Delta + Joint_Gamma_ON + Joint_Tn_BC) + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Joint.lmer_output <- summary(Norm_Joint.lmer)
Norm_Joint.lmer_output
capture.output(Norm_Joint.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Joint_Param_LMER_output.txt") # Write output to text file
# Random Effects LMER model
Norm_Joint_random.lmer <- lmer(Norm_DV_Async_ON ~ 1 + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Joint_random.lmer_output <- summary(Norm_Joint_random.lmer)
Norm_Joint_random.lmer_output
capture.output(Norm_Joint_random.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Joint_Param_random_LMER_output") # Write output to text file
# Compare full and reduced models
Norm_Joint_models_comparison <- anova(Norm_Joint.lmer, Norm_Joint_random.lmer)
Norm_Joint_models_comparison
capture.output(Norm_Joint_models_comparison, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Joint_Param_comparison.txt") # Write output to text file
Norm_Joint.table <- huxreg(Norm_Joint.lmer, Norm_Joint_random.lmer, statistics = NULL, number_format = 3)
Norm_Joint.table
huxtable::quick_docx(Norm_Joint.table, file = "Norm_Joint_Param_table.docx") # Make Word table (not standardized coefficients)
probe_interaction(model = Adapt.lmer, pred = Adapt_Beta, modx = Section,
mod2 = Leadership)
# ADAPTATION-ONLY ADAM
norm_all_data_cleaned <- norm_all_data[!rownames(norm_all_data) %in% c("29", "30"), ]
# Adapt Main LMER model predicting Asynchrony
Norm_Adapt.lmer <- lmer(Norm_DV_Async_ON ~ Section * Leadership * Visual_Contact * (Adapt_Alpha + Adapt_Beta + Adapt_Tn_ON + Adapt_Mn_ON) + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Adapt.lmer_output <- summary(Norm_Adapt.lmer)
Norm_Adapt.lmer_output
capture.output(Norm_Adapt.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_LMER_output.txt") # Write output to text file
# Random Effects LMER model
Norm_Adapt_random.lmer <- lmer(Norm_DV_Async_ON ~ 1 + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Adapt_random.lmer_output <- summary(Norm_Adapt_random.lmer)
Norm_Adapt_random.lmer_output
capture.output(Norm_Adapt_random.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_random_LMER_output.txt") # Write output to text file
# Compare full and reduced models
Norm_Adapt_models_comparison <- anova(Norm_Adapt.lmer, Norm_Adapt_random.lmer)
Norm_Adapt_models_comparison
capture.output(Norm_Adapt_models_comparison, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_comparison.txt") # Write output to text file
Norm_Adapt.table <- huxreg(Norm_Adapt.lmer, Norm_Adapt_random.lmer, statistics = NULL, number_format = 3)
Norm_Adapt.table
huxtable::quick_docx(Norm_Adapt.table, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Adapt_Param_table.docx") # Make Word table (not standardized coefficients)
# JOINT ADAM
# Joint Main LMER model predicting Asynchrony (NB: Runs into convergence and singularity issues if Condition*Tn interaction is included)
Norm_Joint.lmer <- lmer(Norm_DV_Async_ON ~ Section * Leadership * Visual_Contact * (Joint_Beta + Joint_Delta + Joint_Gamma_ON + Joint_Tn_BC) + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Joint.lmer_output <- summary(Norm_Joint.lmer)
Norm_Joint.lmer_output
capture.output(Norm_Joint.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Joint_Param_LMER_output.txt") # Write output to text file
# Random Effects LMER model
Norm_Joint_random.lmer <- lmer(Norm_DV_Async_ON ~ 1 + (1 | Pair), data = norm_all_data_cleaned, control = lmerControl(optimizer = "bobyqa"), REML = FALSE)
Norm_Joint_random.lmer_output <- summary(Norm_Joint_random.lmer)
Norm_Joint_random.lmer_output
capture.output(Norm_Joint_random.lmer_output, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Joint_Param_random_LMER_output") # Write output to text file
# Compare full and reduced models
Norm_Joint_models_comparison <- anova(Norm_Joint.lmer, Norm_Joint_random.lmer)
Norm_Joint_models_comparison
capture.output(Norm_Joint_models_comparison, file = "C:/Users/marc1/OneDrive/Desktop/Research/Aarhus University/Keller Work/Analyses/Bounded/Outputs bound/Script 6/Norm_Joint_Param_comparison.txt") # Write output to text file
Norm_Joint.table <- huxreg(Norm_Joint.lmer, Norm_Joint_random.lmer, statistics = NULL, number_format = 3)
Norm_Joint.table
huxtable::quick_docx(Norm_Joint.table, file = "Norm_Joint_Param_table.docx") # Make Word table (not standardized coefficients)
probe_interaction(model = Adapt.lmer, pred = Adapt_Beta, modx = Section,
mod2 = Leadership)
probe_interaction(model = Adapt.lmer, pred = Adapt_Beta, modx = Section,
mod2 = Leadership)
# Check the structure of the relevant variables
levels(all_data$Adapt_Beta)
levels(all_data$Section)
levels(all_data$Leadership)
# If any of them are not factors or have incorrect levels, convert them:
all_data$Adapt_Beta <- factor(all_data$Adapt_Beta)
all_data$Section <- factor(all_data$Section)
all_data$Leadership <- factor(all_data$Leadership)
# Check the structure of the relevant variables
levels(all_data$Adapt_Beta)
levels(all_data$Section)
levels(all_data$Leadership)
# If any of them are not factors or have incorrect levels, convert them:
all_data$Adapt_Beta <- factor(all_data$Adapt_Beta)
all_data$Section <- factor(all_data$Section)
all_data$Leadership <- factor(all_data$Leadership)
levels(all_data$Adapt_Beta)
levels(all_data$Section)
levels(all_data$Leadership)
Interaction_Plot <- interact_plot(model = Adapt_Mn.lmer, pred = Adapt_Beta, modx = Section, mod2 = Leadership, geom = "line", point.shape = TRUE)
Interaction_Plot <- interact_plot(model = Norm_Adapt.lmer, pred = Adapt_Beta, modx = Section, mod2 = Leadership, geom = "line", point.shape = TRUE)
# Customize the plot like a normal ggplot object
Interaction_Plot <- Interaction_Plot +
theme_minimal() +  # Use a minimal theme
labs(title = "Adaptation Motor Noise Interaction Plot",  # Title
x = "Leadership", y = "Predicted Value") +  # Axis labels
scale_color_manual(values = c("red", "blue")) +  # Customize color scale
theme(axis.text.x = element_text(angle = 0, hjust = 1))  # Rotate x-axis labels
Interaction_Plot
interact_plot(model = Norm_Adapt.lmer, pred = Adapt_Beta, modx = Section, mod2 = Leadership, geom = "line", point.shape = TRUE)
Interaction_Plot <- interact_plot(model = Norm_Adapt.lmer, pred = Adapt_Beta, modx = Section, mod2 = Leadership, geom = "line", point.shape = TRUE)
# Customize the plot like a normal ggplot object
Interaction_Plot <- Interaction_Plot +
theme_minimal() +  # Use a minimal theme
labs(title = "Adaptation Motor Noise Interaction Plot",  # Title
x = "Leadership", y = "Predicted Value") +  # Axis labels
scale_color_manual(values = c("red", "blue")) +  # Customize color scale
theme(axis.text.x = element_text(angle = 0, hjust = 1))  # Rotate x-axis labels
Interaction_Plot
Interaction_Plot <- interact_plot(model = Norm_Adapt.lmer, pred = Adapt_Beta, modx = Section, mod2 = Leadership, geom = "line", point.shape = TRUE)
# Customize the plot like a normal ggplot object
Interaction_Plot <- Interaction_Plot +
theme_minimal() +  # Use a minimal theme
labs(title = "Normalized Period Correction Interaction Plot",  # Title
x = "Leadership", y = "Predicted Value") +  # Axis labels
scale_color_manual(values = c("red", "blue")) +  # Customize color scale
theme(axis.text.x = element_text(angle = 0, hjust = 1))  # Rotate x-axis labels
Interaction_Plot
Interaction_Plot <- interact_plot(model = Norm_Joint.lmer, pred = Joint_Tn_BC, modx = Section, mod2 = Leadership, geom = "line", point.shape = TRUE)
# Customize the plot like a normal ggplot object
Interaction_Plot <- Interaction_Plot +
theme_minimal() +  # Use a minimal theme
labs(title = "Normalized Joint Time Keeper Interaction Plot",  # Title
x = "Leadership", y = "Predicted Value") +  # Axis labels
scale_color_manual(values = c("red", "blue")) +  # Customize color scale
theme(axis.text.x = element_text(angle = 0, hjust = 1))  # Rotate x-axis labels
Interaction_Plot
setwd("C:/Users/marc1/OneDrive/Desktop/School/Aarhus University/Current Classes/Thesis/Data/processed_data") # NEED TO SET TO CURRENT PATH
setwd("C:/Users/marc1/OneDrive/Desktop/School/Aarhus University/Current Classes/Thesis/Data/processed_data") # NEED TO SET TO CURRENT PATH
setwd("C:/Users/marc1/OneDrive/Desktop/School/Aarhus University/Current Classes/Thesis/Data/processed_data")
setwd("C:/Users/marc1/OneDrive/Desktop/School/Aarhus University/Current Classes/Thesis/Data/processed_data")
wd
cd
setwd("C:/Users/marc1/OneDrive/Desktop/School/Aarhus University/Current Classes/Thesis/Data/processed_data")
library(bestNormalize)
library(caret)
library(dplyr)
library(emmeans)
library(flextable)
library(ggeffects)
library(ggplot2)
library(ggpp) # for jitternudge [not currently used]
library(ggpubr)
library(ggsci) # For Raincloud plots
library(grid)
library(gridExtra)
library(gtools)
library(huxtable)
library(broom.mixed)
library(lme4) # For lmer
library(lmerTest) # Alternative for lmer that gives p-values/asterisks. Automatically updates output of lmer (just load here, no need to call below)
library(reshape2)
library(rstatix)
library(stats) # For confint
library(tidyr)
library(tidyverse)
library(readxl)
library(CRSSIO) # This has additional custom editing features for boxplot
